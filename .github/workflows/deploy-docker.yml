name: Deploy to EC2
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}:${{ github.sha }}
  WORK_DIR: /home/${{ secrets.USERNAME }}/lfr/front
  NGINX_DIR: "/home/${{ secrets.USERNAME }}/lfr/nginx/"
jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.13.0"

      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: ${{ steps.npm-cache.outputs.cache-hit != 'true' }}
        run: npm ci

      - name: Run build
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.OLKK_GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}
  serve-config-file:
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: serve-env
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            mkdir -p ${{ env.WORK_DIR }} && cd ${{ env.WORK_DIR }}
            rm -f .env
            echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> .env
      - name: Copy upstream
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: "./.github/nginx-config/front.conf"
          target: ${{ env.WORK_DIR}}
          overwrite: true

      - name: Copy upstream
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: "./.github/nginx-config/upstream/"
          target: ${{ env.WORK_DIR}}
          overwrite: true

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: "./.github/docker-compose.yml"
          target: ${{ env.WORK_DIR}}
          overwrite: tru

  nginx-cerbot:
    runs-on: ubuntu-24.04
    needs: serve-config-file
    steps:
      - name: start-nginx-cerbot
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            COMPSE_PATH="${{ env.WORK_DIR }}/docker-compose.yml""

            # Nginx 컨테이너가 실행 중인지 확인하고 없으면 시작
            if ! docker ps -a --format "{{.Names}}" | grep -q "^nginx$"; then
              docker compose -f "$COMPOSE_PATH" pull nginx
              docker compose -f "$COMPOSE_PATH" up -d nginx
            else
              echo "Nginx 컨테이너가 이미 존재합니다."
            fi

            # certbot 컨테이너가 실행 중인지 확인하고 없으면 시작
            if ! docker ps -a --format "{{.Names}}" | grep -q "^certbot$"; then
              # 갱신용 certbot 컨테이너 기동
              docker compose -f $composePath up -d certbot
            else
              echo "cerbot 컨테이너가 이미 존재합니다."
            fi

  deploy:
    runs-on: ubuntu-24.04
    needs: nginx-cerbot
    env:
      HOST: ${{ secrets.HOST }}
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            COMPSE_PATH="${{ env.WORK_DIR }}/docker-compose.yml"
            mkdir -p ${{ env.NGINX_DIR }}
            cp -f ${{ env.WORK_DIR }}/front.conf ${{ env.NGINX_DIR }}/front.conf
            # 현재 활성 서비스 확인
            ACTIVE_SERVICE=$(docker ps --format "{{.Names}}" | grep -E "lfr-front-blue|lfr-front-green" | head -n1)
            if [ "$ACTIVE_SERVICE" = "lfr-front-blue" ]; then
              NEW_SERVICE="green"
              OLD_SERVICE="blue"
              cp -f ${{ env.WORK_DIR }}/upstream/green.conf ${{ env.NGINX_DIR }}/front-active-upstream.conf
            else
              NEW_SERVICE="blue"
              OLD_SERVICE="green"
              cp -f ${{ env.WORK_DIR }}/upstream/blue.conf ${{ env.NGINX_DIR }}/back-active-upstream.conf
            fi

            # 새 서비스 실행
            docker compose -f "$COMPSE_PATH" pull "$NEW_SERVICE"
            docker compose -f "$COMPSE_PATH" up -d "$NEW_SERVICE"

            # health check, Todo
            sleep 15 

            # reload nginx config
            docker exec -it nginx nginx -s reload

            # 기존 서비스 종료
            docker compose -f "$COMPSE_PATH" stop "$OLD_SERVICE"
            docker compose -f "$COMPSE_PATH" rm "$OLD_SERVICE"

            # 사용하지 않는 이미지 삭제
            docker image prune -f
