name: Deploy to EC2
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}:${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.13.0"

      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: ${{ steps.npm-cache.outputs.cache-hit != 'true' }}
        run: npm ci

      - name: Run build
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.OLKK_GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}

  deploy:
    runs-on: ubuntu-24.04
    needs: build
    env:
      HOST: ${{ secrets.HOST }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: "./docker-compose.yml"
          target: "/home/${{ secrets.USERNAME }}/lfr/front/"

      - name: Copy nginx config to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: "./nginx.conf"
          target: "/home/${{ secrets.USERNAME }}/lfr/front/"

      - name: Deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /home/${{ secrets.USERNAME }}/lfr/front
            composePath="./docker-compose.yml"

            DOMAIN="gemspi.kro.kr"

            # certbot 컨테이너가 실행 중인지 확인하고 없으면 시작
            if ! docker ps -a --format "{{.Names}}" | grep -q "^certbot$"; then
              docker compose -f $composePath pull certbot

              docker run --rm \
              -v /home/ec2-user/lfr/certs:/etc/letsencrypt \
              -v /home/ec2-user/lfr/certbot/www:/var/www/certbot \
              certbot/certbot certonly \
              --non-interactive --agree-tos \
              --email ahn.chanjin.96@gmail.com \
              --webroot --webroot-path=/var/www/certbot \
              -d $DOMAIN

              # 갱신용 certbot 컨테이너 기동
              docker compose -f $composePath up -d certbot
            else
              echo "cerbot 컨테이너가 이미 존재합니다."
            fi


            # 현재 활성 서비스 확인
            ACTIVE_SERVICE=$(docker ps --format "{{.Names}}" | grep -E "lfr-front-blue|lfr-front-green" | head -n1)

            # 비활성 서비스 결정
            if [ "$ACTIVE_SERVICE" = "lfr-f-blue" ]; then
              NEW_SERVICE="green"
              OLD_SERVICE="blue"
            else
              NEW_SERVICE="blue"
              OLD_SERVICE="green"
            fi

            echo "front 서비스 중지"
            docker stop lfr-frontend
            docker rm lfr-frontend

            echo "front 새 서비스 실행"
            IMAGE_NAME=${{ env.IMAGE_NAME }} docker compose -f $composePath pull blue
            IMAGE_NAME=${{ env.IMAGE_NAME }} docker compose -f $composePath up -d --no-deps blue

            sleep 30  # 또는 더 정교한 헬스 체크 로직

            # 트래픽을 새 서비스로 전환 (예: Nginx 설정 업데이트)
            # 여기에 Nginx 설정 업데이트 로직 추가


            # 사용하지 않는 이미지 정리
            docker image prune -f

            # Nginx 컨테이너가 실행 중인지 확인하고 없으면 시작
            if ! docker ps -a --format "{{.Names}}" | grep -q "^nginx$"; then
              docker compose -f $composePath pull nginx
              docker compose -f $composePath up -d nginx
            else
              echo "Nginx 컨테이너가 이미 존재합니다."
            fi
